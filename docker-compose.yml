services:
  qlines_app:
    build:
      context: ./
      dockerfile: Dockerfile_qlines
    image: qlines_app_image
    
    container_name: qlines_app_container
    command: gunicorn -w 4 -b 0.0.0.0:5000 qlines:app --chdir /opt/qlines_app
    #privileged: true
    #restart: unless-stopped
    ports:
    #  - "7000-7100:7000-7100" # for mqtt and dbs
      #- "80:5000"  # gunicorn
      #- "127.0.0.1:8000:8000"
      #- "127.0.0.1:8001:8001"
      - "0.0.0.0:80:5000"

    volumes:
      - ./:/opt/qlines_app

  mongo:
    image: mongo
    restart: always
    container_name: qlines_mongo_container
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 8081:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: example
  #     ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
  #     ME_CONFIG_BASICAUTH: false

  rqworker:
    build:
      context: ./
      dockerfile: Dockerfile_qlines
    container_name: qlines_rq_worker
    image: qlines_rqworker_image
    #command: rq worker
    depends_on:
      - redis
    volumes:
      - ./:/opt/qlines_app
    environment:
      - REDIS_URL=redis://redis:6379  
    command: 
      ["python", "/opt/qlines_app/rqworker.py"]      

  redis:
    image: redis:latest
    container_name: qlines_redis_container
    ports:
      - "6379:6379"


  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: general_mosquitto_container
    ports:
      - "1883:1883"  # MQTT protocol port
      - "9001:9001"  # WebSockets (optional, if needed)
    volumes:
      - ./mosquitto:/mosquitto/config
    restart: unless-stopped      


networks:
  qlines_net:
    name: custom_qlines_network
